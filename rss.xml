<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	
	xmlns:georss="http://www.georss.org/georss"
	xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"
	>

<channel>
	<title>ともすた</title>
	<atom:link href="https://tomosta.jp/feed/" rel="self" type="application/rss+xml" />
	<link>https://tomosta.jp</link>
	<description>プログラミング学習コミュニティ</description>
	<lastBuildDate>Tue, 04 Jul 2023 03:29:07 +0000</lastBuildDate>
	<language>ja</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	

<image>
	<url>https://tomosta.jp/wp-content/uploads/2021/12/manabee_512-150x150.png</url>
	<title>ともすた</title>
	<link>https://tomosta.jp</link>
	<width>32</width>
	<height>32</height>
</image> 
<site xmlns="com-wordpress:feed-additions:1">207465929</site>	<item>
		<title>Snow Monkeyに「フレックス」が「グリッド」がやって来た</title>
		<link>https://tomosta.jp/2023/07/snow-monkey-flex-grid/</link>
					<comments>https://tomosta.jp/2023/07/snow-monkey-flex-grid/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Tue, 04 Jul 2023 03:27:06 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[Snow Monkey]]></category>
		<category><![CDATA[WordPress]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23228</guid>

					<description><![CDATA[Snow Monkeyの公式プラグイン『Snow Monkey Blocks』が19.9.0にバージョンアップし、新たに「フレックス」ブロックと「グリッド」ブロックが追加されました。]]></description>
										<content:encoded><![CDATA[
<p>Snow Monkeyの公式プラグイン『Snow Monkey Blocks』が19.9.0にバージョンアップし、新たに「フレックス」ブロックと「グリッド」ブロックが追加されました。</p>



<p>これは、CSSの「Flexible Box」と「CSS Grid Layout」をブロックエディタで利用する事ができるブロックで、それまでの既存ブロックではできないような柔軟なレイアウトが可能になります。</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe title="Snow Monkeyに「フレックス」が「グリッド」がやって来た" width="500" height="281" src="https://www.youtube.com/embed/GsdnKOg6XUg?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<h2 class="wp-block-heading">フレックスブロックを使おう</h2>



<p>まずは、フレックスブロックを使って、図のようなナビゲーションを作ってみましょう。ブロックの挿入から「フレックス」を挿入します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-1024x576.png" alt="" class="wp-image-23232" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ブロック内に、ブロックを挿入するボタンが表示されるので、これをクリックして画像や段落などを自由に追加していきましょう。ここでは、図のような段落を追加しました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-1-1024x576.png" alt="" class="wp-image-23233" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">横方向に配置しよう</h3>



<p>フレックスブロックの魅力は、要素を縦にも横にも並べることができる点です。ブロックの設定で「方向」を「横」に設定し、「複数行に折り返す」のチェックを外すと、要素が横に並ぶようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-2-1024x576.png" alt="" class="wp-image-23234" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">スタイルを調整しよう</h3>



<p>現状では、すべての要素がくっついているため、スタイル調整の「ブロックの間隔」で調整しましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-3-1024x576.png" alt="" class="wp-image-23235" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">フレックスブロックを入れ子にしよう</h3>



<p>フレックスブロックは、縦に要素を並べるときにも非常に扱いやすいです。ここでは、図のようにアイコンとナビゲーションを並べるために、フレックスブロックを入れ子にしましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-4-1024x576.png" alt="" class="wp-image-23237" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>画像を挿入したら、両方の要素を選択して「ブロックの変換」でフレックスブロックに変更しましょう。縦に並べることができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-5-1024x576.png" alt="" class="wp-image-23238" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この中で、中央揃えにしたり幅を調整したりができるので、こうして4つの要素に画像を挿入して、中央揃えで要素の基本サイズを150pxに設定しました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-6-1024x576.png" alt="" class="wp-image-23240" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これで、ナビゲーションの完成です。画面幅が狭い場合は、幅を狭くして1行を保つか、折り返すかも設定の「複数行から折り返す」のチェックで、変更できます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-7-1024x576.png" alt="" class="wp-image-23241" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">グリッドブロックを使おう</h2>



<p>グリッドブロックは、フレキシブルブロック以上に柔軟なレイアウトができるブロックです。行と列を定義しておき、その中に要素をはめ込んでいくことができます。</p>



<p>ブロック挿入ツールから「グリッド」を選んで挿入したら、中にブロック要素を追加していきます。ここでは、次のようなURLを指定して、ダミーの画像を複数配置しました。</p>



<pre class="wp-block-code"><code>https:&#47;&#47;picsum.photos/id/1/500/250</code></pre>



<p>すると、図のように縦横に並びます。設定を確認すると、「GRID-TEMPLATE-COLUMNS」と「GRID-TEMPLATE-ROWS」という設定があり、ここで行と列の各設定を行うことができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-8-1024x576.png" alt="" class="wp-image-23243" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">GRID-TEMPLATE-COLUMNSを設定しよう</h3>



<p>まずは列の設定です。次の各設定ができます。</p>



<ul>
<li>最小幅<br>各要素の最小の幅を決め、画面幅の中に入れられるだけ入れていきます。入らない要素は、次の行に送られます。</li>
</ul>



<p>最小幅を選ぶと「自動反復」という設定項目が増えます。これは、要素数が1行に満たなくなった場合、右側を余白とする（auto-fit）か、幅を広げて領域を埋める（auto-fill）を選ぶことができます。</p>



<ul>
<li>カラム数<br>あらかじめ定めたカラム数になるように、要素の幅を縮めて挿入します。この場合、画面幅が狭くなっても折り返されません。</li>



<li>自由入力<br>カラムの数や幅を直接していることができます。例えば、次のように指定すると列幅の違うカラムを4つ準備できます。</li>
</ul>



<pre class="wp-block-code"><code>100px 200px 300px 400px</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-9-1024x576.png" alt="" class="wp-image-23244" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">GRID-TEMPLATE-ROWSを設定しよう</h3>



<p>今度は、行を調整します。行は「行数」と「自由入力」から選ぶことができ、自由入力の場合は次のように各行の高さを指定することもできます。</p>



<pre class="wp-block-code"><code>50px 100px</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/07/image-10-1024x576.png" alt="" class="wp-image-23245" srcset="https://tomosta.jp/wp-content/uploads/2023/07/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/07/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/07/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/07/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/07/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、スタイル調整ではフレックスブロックと同様にパディングやブロックの間隔なども調整ができます。</p>



<p>こうして、行と列で柔軟なレイアウトができるのがグリッドレイアウトです。</p>



<h2 class="wp-block-heading">レスポンシブには非対応</h2>



<p>このように、フレックスボックスやCSSグリッドをマウス操作だけで挿入できるようになったSnow Monkey Blocksですが、画面幅ごとの設定などはできません。</p>



<p>そのため例えば、スマホの時は要素を縦に並べたいとか、フレックスブロックを解除したいといったことはできません。これは、WordPressの思想やモンキーレンチさんの思想と関連しているようで、現状では用意する予定はないとのことです。</p>



<p>うまく各画面幅で表示できるように調整するか、Snow Monkey Editorの画面幅ごとの表示・非表示で対応する、または拡張CSSで対応するとよいでしょう。</p>



<h2 class="wp-block-heading">グリッドブロックの進化に期待</h2>



<p>もう一点は、グリッドブロックの機能が現状ではシンプルな点です。CSS Grid自体はもう少し複雑なプロパティで、例えばgrid-templateというプロパティを利用すれば、複数の列や行をまたいだカラムを設定できたり、カラムの順番を変えたりなども可能ですが、これらはサポートされていません。</p>



<p>とはいえ、そこまでのことを設定パネルでやっていくのはかなり大変だと思われ、複雑な機能になるよりはシンプルな機能を目指した方が良いかも知れず、このあたりはバランスが難しいでしょう。</p>



<p>いずれにしても、フレックスボックスやCSSグリッドを、WordPressのブロックエディタで設定できるようになったというのは、非常に使いやすくなり、ありがたいバージョンアップです。</p>



<ul>
<li><a href="https://snow-monkey.2inc.org/" target="_blank" rel="noreferrer noopener">Snow Monkey</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/07/snow-monkey-flex-grid/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23228</post-id>	</item>
		<item>
		<title>Snow Monkeyでページ内リンクがメニューに隠れてしまうときの対処法</title>
		<link>https://tomosta.jp/2023/06/snow-monkey%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e5%86%85%e3%83%aa%e3%83%b3%e3%82%af%e3%81%8c%e3%83%a1%e3%83%8b%e3%83%a5%e3%83%bc%e3%81%ab%e9%9a%a0%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e3%81%a8/</link>
					<comments>https://tomosta.jp/2023/06/snow-monkey%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e5%86%85%e3%83%aa%e3%83%b3%e3%82%af%e3%81%8c%e3%83%a1%e3%83%8b%e3%83%a5%e3%83%bc%e3%81%ab%e9%9a%a0%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e3%81%a8/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 23 Jun 2023 14:53:18 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[Snow Monkey]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23211</guid>

					<description><![CDATA[Snow Monkeyのメニューバーは、標準で画面上部に固定されて表示されます。 しかし、この状態でページ内リンクを設置すると、次のように見出し部分がメニューの影に隠れてしまいます。内容自体は見られますが、これはちょっと [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>Snow Monkeyのメニューバーは、標準で画面上部に固定されて表示されます。</p>



<p>しかし、この状態でページ内リンクを設置すると、次のように見出し部分がメニューの影に隠れてしまいます。内容自体は見られますが、これはちょっと気になる。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="198" src="https://tomosta.jp/wp-content/uploads/2023/06/image-1024x198.png" alt="" class="wp-image-23216" srcset="https://tomosta.jp/wp-content/uploads/2023/06/image-1024x198.png 1024w, https://tomosta.jp/wp-content/uploads/2023/06/image-300x58.png 300w, https://tomosta.jp/wp-content/uploads/2023/06/image-768x149.png 768w, https://tomosta.jp/wp-content/uploads/2023/06/image-1536x298.png 1536w, https://tomosta.jp/wp-content/uploads/2023/06/image-2048x397.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そんな時は、「特定リンクをスムーススクロールにする」という方法を使うと解決できます。</p>



<h2 class="wp-block-heading">スムーススクロールを設定しよう</h2>



<p>リンクをスムーススクロールに設定するには、<code>u-smooth-scroll</code>というクラスを付加します。リンク要素の場合は、画面左側の「オプション」から「高度な設定」で「追加CSSクラス」に、<code>u-smooth-scroll</code>と入力します。</p>


<div class="wp-block-image">
<figure class="aligncenter size-full is-resized"><img decoding="async" loading="lazy" src="https://tomosta.jp/wp-content/uploads/2023/06/image-1.png" alt="" class="wp-image-23217" width="386" height="199" srcset="https://tomosta.jp/wp-content/uploads/2023/06/image-1.png 772w, https://tomosta.jp/wp-content/uploads/2023/06/image-1-300x155.png 300w, https://tomosta.jp/wp-content/uploads/2023/06/image-1-768x396.png 768w" sizes="(max-width: 386px) 100vw, 386px" /></figure></div>


<p>ボタンリストなどの場合は、親要素にクラスを付加することもできます。これで準備完了。</p>



<p>この状態でリンクをクリックすると、画面がするするとスクロールして、見出し部分でしっかり止まってくれるようになります。便利。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="278" src="https://tomosta.jp/wp-content/uploads/2023/06/image-2-1024x278.png" alt="" class="wp-image-23218" srcset="https://tomosta.jp/wp-content/uploads/2023/06/image-2-1024x278.png 1024w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-300x82.png 300w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-768x209.png 768w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-1536x418.png 1536w, https://tomosta.jp/wp-content/uploads/2023/06/image-2-2048x557.png 2048w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<ul>
<li><a href="https://snow-monkey.2inc.org/2019/06/17/u-smooth-scroll/" target="_blank" rel="noreferrer noopener">特定のリンクをスムーススクロールにする</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/06/snow-monkey%e3%81%a7%e3%83%9a%e3%83%bc%e3%82%b8%e5%86%85%e3%83%aa%e3%83%b3%e3%82%af%e3%81%8c%e3%83%a1%e3%83%8b%e3%83%a5%e3%83%bc%e3%81%ab%e9%9a%a0%e3%82%8c%e3%81%a6%e3%81%97%e3%81%be%e3%81%86%e3%81%a8/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23211</post-id>	</item>
		<item>
		<title>UIコピペサービス CSS Stockを使って ToDoツールのUIを作ろう</title>
		<link>https://tomosta.jp/2023/05/cssstock/</link>
					<comments>https://tomosta.jp/2023/05/cssstock/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Wed, 10 May 2023 03:20:49 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[CSS]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23088</guid>

					<description><![CDATA[ちょっとしたサイトやWebツールを作ろうと思ったときに、CSSで手で書くのは面倒。とはいえ、CSSフレームワークを使うのはちょっと気が重い。

そんな時に便利なツールサイトがおてとさんが運用する『CSS Stock』です。200件以上のUIのデザインを、手軽にコピーして利用できる便利サイトで、デザインがシンプルで非常にオシャレなのが特徴です。]]></description>
										<content:encoded><![CDATA[
<p>ちょっとしたサイトやWebツールを作ろうと思ったときに、CSSで手で書くのは面倒。とはいえ、CSSフレームワークを使うのはちょっと気が重い。</p>



<p>そんな時に便利なツールサイトが<a rel="noreferrer noopener" href="https://twitter.com/ohayoupoteto22" target="_blank">おてと</a>さんが運用する『<a href="https://pote-chil.com/html-maker/">CSS Stock</a>』です。200件以上のUIのデザインを、手軽にコピーして利用できる便利サイトで、デザインがシンプルで非常にオシャレなのが特徴です。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-1024x576.png" alt="" class="wp-image-23093" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>今回は、こちらのCSS Stockを利用して、次のようなToDoツールのUIを作成してみましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-1-1024x576.png" alt="" class="wp-image-23094" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">HTMLを準備しよう</h2>



<p>まずは、新しいファイルを作成したら、次のようなベースのHTMLを作成します。</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;タスク管理&lt;/title&gt;

    &lt;link rel="stylesheet" href="css/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;</code></pre>



<p><code>css/style.css</code>をすでにリンクしているので、このファイルを準備して準備しましょう。またこの時、CSSのリセットをかけていきたいので、ここでは「<a rel="noreferrer noopener" href="https://nicolas-cusan.github.io/destyle.css/" target="_blank">destyle.css</a>」を使ってリセットしていきましょう。これをダウンロードして、<code>destyle.css</code>というファイル名で保存したら<code>style.css</code>からimportしていきます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-2-1024x576.png" alt="" class="wp-image-23097" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<pre class="wp-block-code"><code>@import url(destyle.css);</code></pre>



<p>これで準備完了です。</p>



<h2 class="wp-block-heading">タブを追加しよう</h2>



<p>それではまずは、タブを追加してみましょう。CSS Stockのカタログから「<a rel="noreferrer noopener" href="https://pote-chil.com/html-maker/tab/" target="_blank">タブ</a>」を確認して、好きなパーツを選びましょう。ここでは「吹き出し風のタブ」を選びました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-3-1024x576.png" alt="" class="wp-image-23099" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>色などがカスタマイズできるので、自由に変更します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-4-1024x576.png" alt="" class="wp-image-23101" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そしたら、HTMLとCSSが生成されるので、これをコピーしてそれぞれ貼り付けます。すると、図のようなタブが表示されました。すでにタブが切り替わるような動作も実装されています。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-5-1024x576.png" alt="" class="wp-image-23102" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>1つめのタブの内容を「タスク管理」に変えておきましょう。</p>



<pre class="wp-block-code"><code>&lt;label&gt;
  &lt;input type="radio" name="tab-004" checked&gt;
  タスク管理
&lt;/label&gt;</code></pre>



<h2 class="wp-block-heading">画面を仕上げよう</h2>



<p>続いて、タブの中に検索窓を設置しましょう。1つめのタブの<code>&lt;div&gt;</code>タグの中にHTMLを書き入れます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-6-1024x576.png" alt="" class="wp-image-23105" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>CSS Stockで「<a rel="noreferrer noopener" href="https://pote-chil.com/html-maker/search-form/" target="_blank">検索フォーム</a>」を表示しましょう。ここでは「角丸」を選びました。HTMLとCSSをコピーして、それぞれ貼り付けましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-7-1024x576.png" alt="" class="wp-image-23108" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この時、一部正しく表示されていないのですが、このあたりはCSSのカスタマイズが必要になるので後ほど調整していきましょう。</p>



<p>続けて、<a rel="noreferrer noopener" href="https://pote-chil.com/html-maker/heading/" target="_blank">見出し</a>と<a rel="noreferrer noopener" href="https://pote-chil.com/html-maker/checkbox/" target="_blank">チェックボックス</a>、<a rel="noreferrer noopener" href="https://pote-chil.com/html-maker/footer/" target="_blank">フッター</a>をそれぞれ追加しましょう。（フッターは、HTMLの最後に貼り付けます）。次のような画面になれば完成です。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-8-1024x576.png" alt="" class="wp-image-23110" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">CSSを調整しよう</h2>



<p>貼り付けただけでも、かなりデザインが整えられますが、とはいえ多少はカスタマイズをしないと実用的にはなりません。ここでは、CSSを書き換えていきましょう。</p>



<p>まずは、左寄せになってしまっているので、コンテンツ幅を狭くして画面の中央に配置します。まずは、全体を囲う<code>&lt;div class="container"&gt;</code>を追加しましょう。</p>



<pre class="wp-block-code"><code>&lt;div class="container"&gt;
  &lt;div class="tab-004"&gt;
    ...
&lt;/div&gt;</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-9-1024x576.png" alt="" class="wp-image-23114" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そしたら、この要素に対して次のようなCSSを設定して、幅や位置を調整します。</p>



<pre class="wp-block-code"><code>.container {
  max-width: 600px;
  margin: auto;
}</code></pre>



<p>これで、中央に揃いました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-10-1024x576.png" alt="" class="wp-image-23116" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>すると、タブの幅がコンテンツ幅と合わなくなってしまいました。これは、元のCSSで幅が500pxに設定されているためです。ここでは、このプロパティは削除してしまいましょう。親要素の幅に合わせられます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-11-1024x576.png" alt="" class="wp-image-23117" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">検索窓の不具合を修正しよう</h2>



<p>続いて、検索窓に本来表示されるはずのプレースホルダーが表示されていません。これは、<code>.tab-004</code>のCSSが悪さをしています。これを修正しましょう。次のスタイルを探します。</p>



<pre class="wp-block-code"><code>.tab-004 input {
  display: none;
}</code></pre>



<p>このスタイルが強く効きすぎてコンテンツ内まで隠してしまっているので、セレクターの範囲を狭めます。</p>



<pre class="wp-block-code"><code>.tab-004 &gt; label input {
  ...</code></pre>



<p>これで、検索窓が表示されます。</p>



<p>さらに、現状では検索窓のテキストフィールドの幅が少し狭くなっています。背景色を敷いてみました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-12-1024x576.png" alt="" class="wp-image-23121" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを、幅いっぱいまで伸ばしましょう。まずは、<code>.search-form-001 input</code>の<code>width</code>を100%まで伸ばします。</p>



<pre class="wp-block-code"><code>.search-form-002 input {
  width: 100%;
  ...
}</code></pre>



<p>さらに、親要素の幅も調整します。</p>



<pre class="wp-block-code"><code>.search-form-002 label {
  flex-grow: 1;
}</code></pre>



<p>これで、幅全体に広がります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-13-1024x576.png" alt="" class="wp-image-23124" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-13-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-13-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-13-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-13-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-13.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、<code>.tab-004</code>のスタイルは、他にもさまざまな部分に悪さをしてしまうため、セレクターにそれぞれ<code>&gt;</code>を付加して、範囲を狭くするとよいでしょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-14-1024x576.png" alt="" class="wp-image-23128" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-14-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-14-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-14-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-14-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-14.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">余白を調整しよう</h2>



<p>さらに現状、要素同士がくっつきすぎているので余白を調整します。</p>



<pre class="wp-block-code"><code>.heading-021 {
  margin-top: 1em;
  margin-bottom: 1em;
  ...
}</code></pre>



<h2 class="wp-block-heading">チェックボックスの見た目を調整しよう</h2>



<p>元のスタイルから変更したい場合も、CSSを変更することで自由に調整ができます。ここでは、チェックボックスの背景色はここでは除いておきましょう。<code>.checkbox-003</code>を調整します。</p>



<p>まずは、以下のスタイルは不要なので削除してしまいましょう。</p>



<pre class="wp-block-code"><code>.checkbox-003 label:has(:checked) {
  ...
}</code></pre>



<p>また、幅が狭いので<code>.checkbox-003 label</code>の<code>max-width</code>も削除しておきます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-15-1024x576.png" alt="" class="wp-image-23132" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-15-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-15-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-15-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-15-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-15.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">フッターから余計な要素を削除しよう</h2>



<p>フッターのパーツには、ロゴやフッターリンクの要素などがありますが、不要であればHTMLから削除することができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/05/image-16-1024x576.png" alt="" class="wp-image-23134" srcset="https://tomosta.jp/wp-content/uploads/2023/05/image-16-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/05/image-16-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/05/image-16-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/05/image-16-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/05/image-16.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このように、ちょっとしたカスタマイズでかなり自由に編集できるのが、CSS Stockの各パーツ群の特長です。</p>



<h2 class="wp-block-heading">CSS Stockの良い所と、今後に期待するところ</h2>



<p>CSS Stockはこのように、CSSフレームワークなどによくあるビルドツールを導入しなければならなかったり、SCSSでカスタマイズしてコンパイル環境を整えなければならなかったりなど、面倒な導入を必要とせずに、コピーペーストだけで必要なパーツだけを整えることができるのが魅力です。</p>



<p>カスタマイズなどにはCSSの知識が多少必要となるので、CSSを知らない方が使えるようなツールではありませんが、知っている人に取ってはカスタマイズしやすくて扱いやすいと言えます。</p>



<p>欲をいうと、カスタマイズ機能は用意されていますが、例えば色をカスタマイズしても、次のパーツには引き継がれないため、同じ色を設定し直さなければならなかったり、HTMLとCSSが別々に表示されるのでコピーペーストに若干手間がかかるので、一画面内に表示されていると便利そうですが、このあたりは今後に期待したいところではあります。</p>



<p>非常に便利なツールなので、是非活用していきましょう</p>



<ul>
<li><a href="https://pote-chil.com/html-maker/" target="_blank" rel="noreferrer noopener">CSS Stock</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/05/cssstock/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23088</post-id>	</item>
		<item>
		<title>NoCodeCampアプリコンテストの審査員を担当いたします</title>
		<link>https://tomosta.jp/2023/04/20230421/</link>
					<comments>https://tomosta.jp/2023/04/20230421/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 21 Apr 2023 00:39:20 +0000</pubDate>
				<category><![CDATA[お知らせ]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=23062</guid>

					<description><![CDATA[ノーコード開発者のためのコミュニティであるNoCodeCampが主催する『第1回 NoCodeCampアプリコンテスト』において、ともすたのたにぐち まことが、審査員を務めさせていただくことになりました。 このコンテスト [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>ノーコード開発者のためのコミュニティである<a rel="noreferrer noopener" href="https://nocodecamp.co.jp/" target="_blank">NoCodeCamp</a>が主催する『第1回 NoCodeCampアプリコンテスト』において、ともすたのたにぐち まことが、審査員を務めさせていただくことになりました。</p>



<p>このコンテストは、BubbleやAdalo、STUDIOなどのノーコードを利用して制作したアプリを開発・応募し、当日3分間のミニプレゼンを経て、賞金や記念品を受け取ったり、エキスパートからのフィードバックを受け取ることができます。</p>



<p>エントリー期間は、2023年 5月 10日まで。応募期間は、5月 27日までとなっています。ノーコードを学習中の方や、ノーコードでアプリを開発している方は、是非ご参加ください。</p>



<ul>
<li><a href="https://nocodecamp.co.jp/contest" target="_blank" rel="noreferrer noopener">第1回 NoCodeCampアプリコンテスト</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/04/20230421/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">23062</post-id>	</item>
		<item>
		<title>Laravel 10 + Breezeでログイン画面を簡単に作成しよう</title>
		<link>https://tomosta.jp/2023/04/laravel10/</link>
					<comments>https://tomosta.jp/2023/04/laravel10/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Sat, 15 Apr 2023 04:19:13 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[Laravel]]></category>
		<category><![CDATA[PHP]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22984</guid>

					<description><![CDATA[Laravelといえば、PHPで圧倒的な人気を誇るフレームワークです。フルスタックフレームワークであるため、必要な知識が膨大で、なかなか難しい内容ですが、ここでは参考書籍を参考にSailというDocker環境を作成して、Breezeでのログイン画面制作を体験してみましょう。]]></description>
										<content:encoded><![CDATA[
<p>2023年2月に、PHPフレームワークのLaravelの最新バージョン 10がリリースされました。2022年に Laravel 9がリリースされていたので、1年に1度のペースでバージョンアップがされていることになります。</p>



<p>Laravel 10ではPHP 8.0のサポートが終了し、PHP 8.1以降の環境が必要になります。Laravel公式パッケージもそれに合わせてアップグレードしていて、細かい部分でさまざまな改良が加えられました。詳しくは公式ドキュメントや次の記事などが参考になります。</p>



<ul>
<li><a href="https://kinsta.com/jp/blog/laravel-10/" target="_blank" rel="noreferrer noopener">Laravel 10━アップデートと最新の機能を徹底解説</a></li>
</ul>



<p>この記事では、そんな Laravel 10の環境にいち早く対応した入門書、『Laravelの教科書 バージョン10対応』を参考に、Breezeというユーザー認証パッケージを利用したユーザー登録・ログイン機能を開発してみましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-1024x576.png" alt="" class="wp-image-22986" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Laravel Sailで環境を整える</h2>



<p>Laravelで開発をするには、PHPやMySQL（MariaDB）、Webサーバーなどの環境が必要になります。これらを手作業で構築するのは大変ですが、Laravelには「Laravel Sail」というDcokerをベースにした開発環境の構築ツールが提供されているので、これを利用していきましょう。</p>



<h3 class="wp-block-heading">Docker Desktopをインストールしよう</h3>



<p>Sailを利用するにはDocker環境が必要です。Dockerを利用するには「Docker Desktop」というアプリを利用するのが手軽なので、以下からダウンロードして利用しましょう。</p>



<ul>
<li><a href="https://www.docker.com/" target="_blank" rel="noreferrer noopener">Docker</a></li>
</ul>



<p>「Download Docker Desktop」ボタンをクリックして、環境に合わせたセットアッププログラムをダウンロードしましょう。セットアップを進めて、起動しておきましょう。</p>



<h3 class="wp-block-heading">Laravelをセットアップしよう</h3>



<p>それでは、Laravelのプロジェクトを作成しましょう。ターミナル（Windowsの場合はMicrosoft Terminal）を起動して、コマンドを打ち込んでいきます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-1-1024x576.png" alt="" class="wp-image-22989" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>まずは、プロジェクトを作成したいフォルダに移動しましょう。<code>cd</code>コマンドを使って、ここではデスクトップに移動しましょう。</p>



<pre class="wp-block-code"><code>cd Desktop</code></pre>



<p>そしたら、ここにLaravelのプロジェクトを構築します。</p>



<pre class="wp-block-code"><code>curl -s https://laravel.build/test-project | bash</code></pre>



<p>これによって、<code>laravel.buil</code>というホストからLaravelをダウンロードしてプロジェクトを作成してくれます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-2-1024x576.png" alt="" class="wp-image-22991" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>新しいフォルダができあがっているので、ここに移動します。</p>



<pre class="wp-block-code"><code>cd test-project</code></pre>



<p>そして、Visual Studio Code（VSCode）でこのプロジェクトフォルダを開いておきましょう。VSCodeを起動して開いても良いですが、コマンドラインからも次のコマンドで開くことができます（セットアップ方法によります）</p>



<pre class="wp-block-code"><code>code .</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-3-1024x576.png" alt="" class="wp-image-22994" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">Laravel Sailを起動しよう</h3>



<p>次に、Laravel Sailを起動してみましょう。ここでは、VSCode上でターミナルを起動するとよいでしょう。「ターミナル→新しいターミナル」メニューを開きます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-4-1024x576.png" alt="" class="wp-image-22996" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そしたら、次のようなコマンドを入力します。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail up</code></pre>



<p>これによって、Docker上でLaravelの環境が起動します。うまく起動しない場合は、Docker Desktopを再度起動しましょう。</p>



<p>サーバーが起動しているので、Webブラウザーで次のアドレスにアクセスしましょう。</p>



<pre class="wp-block-code"><code>http:&#47;&#47;localhost</code></pre>



<p>次のような画面が表示されていれば、起動成功です。ここに、プログラムを追加するなどしてオリジナルのプログラムに仕上げていきます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-5-1024x576.png" alt="" class="wp-image-22999" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Breezeをインストールしよう</h2>



<p>続いてここに、ログインのしくみを構築します。ログインのしくみは、1から開発することもできますが、Laravelには公式・非公式のライブラリーが豊富にあるため、これらをうまく組み合わせると開発を楽に進めることができます。</p>



<p>ここでは、公式ライブラリーの「Breeze」というものを利用し、簡単にログインのしくみを構築しましょう。まずは、Breezeをインストールします。ターミナルに、次のコマンドを入力します。ただこの時、ターミナル上でSailが起動していて使うことができないので、右上の「＋」ボタンでもう1つターミナルを起動しておきましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-6-1024x576.png" alt="" class="wp-image-23002" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そして、次のコマンドを入力しましょう。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail composer require laravel/breeze --dev</code></pre>



<p>ここでは、「composer」というPHPのライブラリーなどを扱うためのコマンド（パッケージマネージャーといいます）を利用しています。このコマンドはSailをインストールしたときに、一緒にインストールされるので、そのまま使うことができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-7-1024x576.png" alt="" class="wp-image-23005" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このcomposerを利用して、Breezeをインストールしました。インストールに成功したら、続いてLaravelで利用する準備をしましょう。次のコマンドを入力します。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail artisan breeze:install</code></pre>



<p>今度は「artisan」というツールを利用しました。これは、Laravelに搭載されているLaravelを操作するためのコマンドです。ここでは、BreezeをLaravelに組み込みます。</p>



<p>すると、いくつか質問項目が聞かれます。それぞれ、次のように回答しましょう。</p>



<ul>
<li>Which stack would you like to install（どのビューライブラリをインストールしますか？）<br>&gt; 0（blade）</li>



<li>Would you like to install dark mode support?（ダークモードをサポートしますか？）<br>&gt; no</li>



<li>Would you prefer Pest tests instead of PHPUnit?（PHPUnitの代わりにPestをインストールしますか？）<br>&gt; no</li>
</ul>



<p>こうして組み込み作業を完了した後、ブラウザーの画面を再読み込みしてみましょう。右上に「Login」と「Register」というメニューが追加されています。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-8-1024x576.png" alt="" class="wp-image-23009" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>「Register」をクリックすると入会画面が、「Login」をクリックすると、ログイン画面がすでに準備されています（ただし英語なので、後ほど日本語に変更します）</p>



<p>ただし、現状では登録したデータを記録するための「データベース」が存在しないため、動作しません。続いて、データベースを準備しましょう。</p>



<h2 class="wp-block-heading">データベースを準備しよう</h2>



<p>Laravelでデータベースを扱う場合は「マイグレーション」というしくみを使います。これは、データベースを直接操作するのではなく、操作するためのコマンドを「マイグレート」という作業で適用して、データベースを構築します。こうすることで、開発環境と稼働環境など、複数の環境があったときに、それぞれのデータベースを手作業で調整する必要がなく、マイグレートで統一した環境を作ることができるというメリットがあります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-9-1024x576.png" alt="" class="wp-image-23014" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここでは、先ほどBreezeをインストールしたときに、マイグレーションファイルが生成されているので、これを適用しましょう。次のコマンドを入力します。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail/artisan migrate</code></pre>



<p>これで、データベースが準備できました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-10-1024x576.png" alt="" class="wp-image-23015" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そしたら、Webブラウザーで「Register」メニューをクリックして、実際に会員登録してみましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-11-1024x576.png" alt="" class="wp-image-23016" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ログインをすれば、図のような会員専用画面にログインすることができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-12-1024x576.png" alt="" class="wp-image-23017" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">ログイン画面を日本語化しよう</h2>



<p>Breezeを使って作成したログイン画面は、標準では英語なので、日本語ファイルをあてて日本語にしましょう。自分で作成することもできますが、ここではGitHubで公開されている言語ファイルを利用して日本語化します。</p>



<p>次のサイトにアクセスしましょう。</p>



<ul>
<li><a href="https://github.com/askdkc/breezejp" target="_blank" rel="noreferrer noopener">askdkc/breezejp &#8211; GitHub</a></li>
</ul>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-13-1024x576.png" alt="" class="wp-image-23020" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-13-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-13-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-13-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-13-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-13.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>マニュアルに従って、次のようにコマンドを入力しましょう。ただしここでは、Sailを使っているため少しコマンドが変わります。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail composer require askdkc/breezejp --dev</code></pre>



<p>インストールが終わったら、これをLaravelに適用します。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail artisan breezejp</code></pre>



<p>これで、日本語ファイル群ができあがります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-14-1024x576.png" alt="" class="wp-image-23022" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-14-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-14-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-14-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-14-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-14.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そしたら、一度サーバーを再起動しましょう。もう1つ起動しているターミナルに切り替えて、「Ctrl+C」キーでサーバーを中止します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-15-1024x576.png" alt="" class="wp-image-23025" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-15-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-15-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-15-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-15-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-15.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>そして、改めて起動しましょう。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail up</code></pre>



<p>すると、各画面が日本語された状態で表示されるようになりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-16-1024x576.png" alt="" class="wp-image-23026" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-16-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-16-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-16-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-16-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-16.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">ビューのBladeファイルを編集してみよう</h2>



<p>続いて、ログインした後の画面を変更してみましょう。Laravelでは、「MVCモデル」という考え方を採用していて、プログラムを見た目を管理するビュー（View）と、データを管理するモデル（Model）、そしてそれらをコントロールする、コントローラー（Controller）という3つの役割に分けて、プログラムを開発するという考え方です。それぞれの頭文字を取って「MVC」と呼びます。</p>



<p>ここでは、画面の内容を変更したいため、「ビュー」を編集することになります。Laravelではビューのファイルは「resources/views」というフォルダに保存すると決められています。実際ここに「dashboard.blade.php」というファイルがあります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-17-1024x576.png" alt="" class="wp-image-23030" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-17-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-17-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-17-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-17-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-17.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これを編集していきましょう。</p>



<p>このファイルは「Blade」というテンプレートで構成されているため、ファイルの中に「{{ }}」などで囲まれている箇所があり、これらがプログラムで書き換えられて画面が作られるというしくみです。ここでは、12行目付近の文言を削除して、代わりに「こんにちは」と入力しましょう。</p>



<pre class="wp-block-code"><code>&lt;div class="p-6 text-gray-900"&gt;
こんにちは
&lt;/div&gt;</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-18-1024x576.png" alt="" class="wp-image-23033" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-18-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-18-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-18-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-18-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-18.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これでWebブラウザーを再読み込みすると、図のようにメッセージが変わります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-19-1024x576.png" alt="" class="wp-image-23034" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-19-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-19-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-19-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-19-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-19.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>それではここに、実際にログインをしているユーザーの名前を表示してみましょう。次のように、Bladeの書式に従ってプログラムを埋め込みます。</p>



<pre class="wp-block-code"><code>&lt;div class="p-6 text-gray-900"&gt;
  {{ Auth::user()-&gt;name }}さん、こんにちは
&lt;/div&gt;</code></pre>



<p>すると、名前が表示されるようになりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-20-1024x576.png" alt="" class="wp-image-23037" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-20-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-20-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-20-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-20-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-20.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">Tailwind CSSでデザインをカスタマイズしよう</h2>



<p>LaravelのBladeテンプレートには「コンポーネント」という、すぐに使えるパーツ群が含まれています。そのため、例えばボタンを追加したい場合は次のように記述しましょう。</p>



<pre class="wp-block-code"><code>&lt;x-primary-button&gt;お問い合わせ&lt;/x-primary-button&gt;</code></pre>



<p>このような、独自のタグのようなものを挿入すると、ボタンが配置されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-21-1024x576.png" alt="" class="wp-image-23040" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-21-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-21-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-21-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-21-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-21.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このHTMLの実体は、「resource/views/components」フォルダの中に「primary-button.blade.php」という名前で保存されています。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-22-1024x576.png" alt="" class="wp-image-23042" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-22-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-22-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-22-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-22-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-22.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このファイルを編集して、ボタンの見た目をカスタマイズしてみましょう。</p>



<p>これらのHTMLは、Tailwind CSSというCSSフレームワークを使ってデザインされています。そのため、デザインをカスタマイズする場合は、独自のクラス名を使っていきます。</p>



<p>ここでは、ボタンの色を標準のグレーから、緑色に変更してみましょう。複数の箇所があるので、エディターの置き換え機能を使って「gray」を「green」に置き換えるとよいでしょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-23-1024x576.png" alt="" class="wp-image-23044" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-23-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-23-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-23-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-23-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-23.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これでWebブラウザーを更新してみると、ボタンが見えなくなってしまいました。これは、Tailwind CSSは「使っているクラス名のCSSしか作らない」というしくみがあるため、現状では緑色のスタイルが生成されていません。そこでここでは、Tailwind CSSのコマンドを使ってCSSを再生成します。</p>



<p>ターミナルで次のように入力しましょう。</p>



<pre class="wp-block-code"><code>./vendor/bin/sail npm run build</code></pre>



<p>すると、CSSが再度生成されます。これで再読み込みすれば、緑色のボタンが表示されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/04/image-24-1024x576.png" alt="" class="wp-image-23048" srcset="https://tomosta.jp/wp-content/uploads/2023/04/image-24-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/04/image-24-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/04/image-24-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/04/image-24-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/04/image-24.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このように、Laravelでの開発はLaravelがさまざまなものをあらかじめ準備してくれているので、それらを組み合わせて使っていくことで、簡単にプログラムを開発することができます。</p>



<p>とはいえ、その習得にはPHPの基本はもちろん、データベースやDocker、HTML/CSSとTailwind CSS、そしてNode.jsといった幅広い知識が必要です。じっくり1つ1つを学習しながら、習得していきましょう。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/04/laravel10/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22984</post-id>	</item>
		<item>
		<title>ChatGPTをプログラミング学習に役立てる方法5選</title>
		<link>https://tomosta.jp/2023/03/chatgpt_for_programming_learning/</link>
					<comments>https://tomosta.jp/2023/03/chatgpt_for_programming_learning/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 24 Mar 2023 02:29:37 +0000</pubDate>
				<category><![CDATA[ブログ]]></category>
		<category><![CDATA[ChatGPT]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22918</guid>

					<description><![CDATA[高機能AIチャットサービス、ChatGPTはプログラミング学習にも役立てることができます。ここでは、5つの方法を紹介しましょう。]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="ChatGPTをプログラミング学習に役立てる方法5選" width="500" height="281" src="https://www.youtube.com/embed/YY09ZILhKRM?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>その登場から、一気にAI界の話題をさらっている『<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noreferrer noopener">ChatGPT</a>』。まるで、人間と会話をしているようにAIと会話ができるとして、その賢さに驚愕している人が続出しています。</p>



<p>プログラミングでも、このChatGPTを役立てることができるのですが、どんな所に使ったら良いでしょう？　ここでは、プログラミング学習に役立てる方法5選を紹介しましょう。</p>



<h2 class="wp-block-heading">その前に注意。知識は古いです</h2>



<p>ChatGPTは、質問をするとそれに対して答えてくれるので、まるで本当にことかのように感じますが、実際には誤りも含まれているので気をつけて利用しましょう。例えばここでは、「HTMLの最新バージョンは？」と質問をしてみます。すると、「HTML5」であると回答されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-41-1024x576.png" alt="" class="wp-image-22922" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-41-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-41-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-41-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-41-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-41.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>しかし実は、HTMLは2021年に「HTML Living Standard」が最新とされていて、これは間違いです。なぜこんな簡単な質問も間違えてしまうのか。それは、ChatGPTが「正しいかどうか」を判断していないためです。</p>



<p>ChatGPTのベースとなっている「GPT（Generative Pre-trained Transformer）」という技術は、深層学習の1つで「大規模言語モデル」と呼ばれるものです。これは、「ある言葉の次にはどんな言葉がつながるか」という可能性を探るもので、つまりChatGPTは「次につながりそうな言葉」をつないでいるだけで、それが真実のことであるかは判断していません（現状では）。</p>



<p>そのため、間違えた回答も真実かのように回答してしまいます。このあたりは、注意して利用しなければなりません。</p>



<h2 class="wp-block-heading">1. プログラムの意味を聞く</h2>



<p>では、そんなChatGPTをどのように活用したら良いでしょう？　まず考えられるのは、プログラムコードの意味を教えてもらう方法です。</p>



<p>学習しているときに、意味が分からないプログラムコードが出てきたら、「次のJavaScriptのコードはどういう意味？」など、言語の種類とコードを書いて、プログラムコードを貼り付けましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-42-1024x576.png" alt="" class="wp-image-22924" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-42-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-42-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-42-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-42-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-42.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>すると、そのコードの内容を解析して解説してくれます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-43-1024x576.png" alt="" class="wp-image-22925" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-43-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-43-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-43-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-43-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-43.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>全体的な機能の説明から、各行の解説まで行ってくれるので、かなり理解しやすいでしょう。</p>



<h2 class="wp-block-heading">2. プログラムの改善を依頼する</h2>



<p>自分で作ってみたプログラムや、教材通りに作ったはずのプログラムが動作しない時や、「もう少しきれいに書けないかな？」というときに、「次のプログラムが動作しない原因と、改善点を教えて」などと投げかけてみましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-44-1024x576.png" alt="" class="wp-image-22926" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-44-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-44-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-44-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-44-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-44.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>箇条書きで改善点などを列記してくれます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-45-1024x576.png" alt="" class="wp-image-22928" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-45-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-45-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-45-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-45-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-45.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">3. プログラムを作ってもらう</h2>



<p>プログラムを1から作ってもらうこともできます。仕様を説明して、「というプログラムをJavaScriptで作成して」などと記述すると、ほぼそのまま動作するプログラムを制作してくれます。</p>



<pre class="wp-block-code"><code>次のようなプログラムをJavaScriptで作って

・1から10の数字からランダムで1つ数字を準備して、これを問題とする
・入力窓に「1から10の数字で、好きなものをいってください」と表示して入力を受け付ける
・入力された数字と問題があっていれば「正解」と表示する
・不正解の場合で、問題の数字が入力された数字よりも小さい場合は「もっと小さいです」と表示する。大きい場合は「もっと大きいです」と表示する
・正解するまで、入力欄を表示して繰り返す
・正解したらプログラムを終了する</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-46-1024x576.png" alt="" class="wp-image-22930" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-46-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-46-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-46-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-46-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-46.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ここで生成されたコードを確認しながら、構造を学ぶことができます。 </p>



<h2 class="wp-block-heading">4. 問題を出してもらう</h2>



<p>例えば、「while構文」について知ったら、ChatGPTに「while構文を使ったJavaScriptの問題を出して」とお願いしてみましょう。 </p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-47-1024x576.png" alt="" class="wp-image-22931" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-47-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-47-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-47-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-47-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-47.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ヒントまで含めて問題を出してくれます。また、その後で「答えを教えて」と入力すると、今の問題の回答を教えてくれます。こうして、プログラミング力を鍛えることができます。 </p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-48-1024x576.png" alt="" class="wp-image-22933" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-48-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-48-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-48-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-48-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-48.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">5.サンプルデータを作ってもらう</h2>



<p>データベースを学ぶときや、プログラムを作成するときに、ある程度の件数の「ダミーデータ」が欲しいときがあります。そんな時は、次のように箇条書きでお願いしてみましょう。 </p>



<pre class="wp-block-code"><code>次の項目があるダミーデータをJSON形式で10件作って

・都道府県
・会社名
・電話番号
・メールアドレス
・メールマガジン許可（trueかfalseのどちらかの値）</code></pre>



<p>件数が多い場合、途中で止まってしまいますが「続きを書いて」といえば、続けてくれます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-49-1024x576.png" alt="" class="wp-image-22935" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-49-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-49-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-49-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-49-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-49.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このように、ChatGPTはいろいろな作業をお願いすることができます。先の通り、ChatGPTを最初に使いはじめると「○○ってなに？」とか「○○のおいしいお店は？」など、その「知識」を期待して会話してしまうのですが、これではChatGPTの性能をまったく発揮することができません。</p>



<p>ChatGPTは、これまで蓄積されたプログラミング言語のバグの情報や、サンプルプログラムの内容やその解説など、「過去」の膨大な情報を蓄積しています。これをうまく引き出してあげれば、プログラミングの学習にものすごい力を発揮します。</p>



<p>是非うまく活用して、スムーズに学習を進めていきましょう。</p>



<ul>
<li><a href="https://openai.com/blog/chatgpt" target="_blank" rel="noreferrer noopener">ChatGPT</a></li>
</ul>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/03/chatgpt_for_programming_learning/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22918</post-id>	</item>
		<item>
		<title>Emmet入門 &#8211; VisualStudio CodeでEmmetを使おう</title>
		<link>https://tomosta.jp/2023/03/emmet-begin/</link>
					<comments>https://tomosta.jp/2023/03/emmet-begin/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 17 Mar 2023 07:20:19 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[emmet]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22850</guid>

					<description><![CDATA[HTMLやCSSを短い記述で展開できるEmmetという記法を、VisualStudio Codeで使う方法について紹介します。]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Emmet入門 - VisualStudio CodeでEmmetを使おう" width="500" height="281" src="https://www.youtube.com/embed/pqUgx9rJZFA?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>Emmet（エメット）とは、HTMLやCSSを短く記述するための「記法」の名前です。HTMLやCSSは、例えば「見出し1」を作りたいというという場合、次のようなHTMLタグを記述する必要があります。</p>



<pre class="wp-block-code"><code>&lt;h1></code></pre>



<p>しかし、HTMLタグには決まった記号が入り交じっていたり、開始タグと終了タグが必要であったりなど、入力が面倒で数が増えると非常に大変です。そこで、Emmet記法を利用すると、次のように記述する事ができます。</p>



<pre class="wp-block-code"><code>h1</code></pre>



<p>タグの名前だけを記述すれば、先のようなタグに展開することができます。これによって、入力文字数を劇的に減らすことができます。</p>



<h2 class="wp-block-heading">VisualStudio CodeでEmmetを使おう</h2>



<p>Emmetを利用するには、Emmet記法に対応したエディターを利用するか、プラグインなどが提供されている場合は、これをインストールする必要があります。MicrosoftのVisual Studio Code（以下、VSCode）は標準でEmmetに対応しているため、すぐに使い始めることができます。</p>



<p>まずは、VSCodeを起動したら「ファイル→新規ファイル」で新しいファイルを作成しましょう。そしたら、ファイル名を「index.html」としてデスクトップなどに保存します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-7-1024x576.png" alt="" class="wp-image-22852" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これで、Emmetを利用する準備が完了です。</p>



<h2 class="wp-block-heading">Emmetの書式</h2>



<p>それでは、Emmetの基本から学んでいきましょう。</p>



<h3 class="wp-block-heading">要素</h3>



<p>まずは、冒頭にも紹介した要素の展開です。これには、タグの名前だけを記述します。</p>



<pre class="wp-block-code"><code>div
p
h1</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-8-1024x576.png" alt="" class="wp-image-22855" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>どのような要素でも、展開することができます。</p>



<h3 class="wp-block-heading">子要素</h3>



<p>例えば、<code>&lt;ul&gt;</code>タグの子要素に<code>&lt;li&gt;</code>要素を配置したい場合は、<code>&gt;</code>という記号でつなげて記述します。</p>



<pre class="wp-block-code"><code>ul>li</code></pre>



<p>次のように展開されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-9-1024x576.png" alt="" class="wp-image-22856" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">兄弟要素</h3>



<p>同列に並べる兄弟要素にしたい場合は<code>+</code>記号を使います。</p>



<pre class="wp-block-code"><code>div+p+bq</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-10-1024x576.png" alt="" class="wp-image-22858" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">階層を上がる</h3>



<p>例えば、次のようなEmmetがあったとしましょう。</p>



<pre class="wp-block-code"><code>ul>li</code></pre>



<p>ここで、<code>&lt;ul></code>要素と同列の場所に<code>&lt;div></code>を並べたい場合、階層を1つ上がる必要があります。そんな時は<code>^</code>を使います。</p>



<pre class="wp-block-code"><code>ul>li^div</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-11-1024x576.png" alt="" class="wp-image-22859" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この記号は、つなげて記述する事で複数、階層を上げることもできます。</p>



<pre class="wp-block-code"><code>div>ul>li^^p</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-12-1024x576.png" alt="" class="wp-image-22860" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">複数展開</h3>



<p>例えば、<code>&lt;li></code>要素を複数展開したい場合、何度も記述しなくても<code>*</code>という記号で繰り返したい回数を指定すれば、一気に展開できます。</p>



<pre class="wp-block-code"><code>ul>li*5</code></pre>



<p>これは、次のように<code>&lt;li></code>が5回繰り返されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-14-1024x576.png" alt="" class="wp-image-22863" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-14-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-14-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-14-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-14-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-14.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">グループ化</h3>



<p>では、<code>&lt;dt></code>と<code>&lt;dd></code>を複数展開したい場合はどうしたら良いでしょう？　次のようにしてもうまく行きません。</p>



<pre class="wp-block-code"><code>dl>dt*5+dd*5</code></pre>



<p>この場合、<code>&lt;dt></code>だけが先に5回繰り返されてしまいます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-15-1024x576.png" alt="" class="wp-image-22865" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-15-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-15-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-15-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-15-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-15.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>このような場合は、要素をグループ化します。</p>



<pre class="wp-block-code"><code>dl>(dt+dd)*5</code></pre>



<p>すると、<code>dt+dd</code>がグループになって、5回繰り返されるようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-16-1024x576.png" alt="" class="wp-image-22867" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-16-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-16-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-16-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-16-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-16.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、これは、先の階層の操作にも使えます。グループ化した場合は、階層が下がらないので、そのまま記述できます。</p>



<pre class="wp-block-code"><code>(ul>li)+p</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-17-1024x576.png" alt="" class="wp-image-22868" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-17-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-17-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-17-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-17-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-17.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これは、先の次の記述と同じ意味です。</p>



<pre class="wp-block-code"><code>ul>li^p</code></pre>



<h3 class="wp-block-heading">属性</h3>



<p>Emmetでは、タグの展開だけではなく、いくつかの属性を付加することもできます。例えば、<code>#</code>をつなぐとID属性が、<code>.</code>をつなぐとclass属性を付加できます。</p>



<pre class="wp-block-code"><code>div#header+div.page.class1</code></pre>



<p>次のように展開されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-18-1024x576.png" alt="" class="wp-image-22870" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-18-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-18-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-18-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-18-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-18.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>class属性は複数指定することもできます。</p>



<p>その他の属性を挿入したい場合は、次のように記述します。</p>



<pre class="wp-block-code"><code>td&#91;title="price" colspan=3]</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-19-1024x576.png" alt="" class="wp-image-22871" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-19-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-19-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-19-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-19-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-19.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">連番</h3>



<p>繰り返しで挿入するとき、属性に連番を挿入することができます。数字を振りたいところに<code>$</code>記号を挿入します。</p>



<pre class="wp-block-code"><code>ul>li.item$*5</code></pre>



<p>次のように連番が割り振られます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-20-1024x576.png" alt="" class="wp-image-22873" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-20-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-20-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-20-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-20-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-20.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>桁数を合わせたい場合は、<code>$</code>記号を重ねます。</p>



<pre class="wp-block-code"><code>ul>li.item$$$*5</code></pre>



<p><code>item001</code>のように、3桁で割り振られるようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-21-1024x576.png" alt="" class="wp-image-22874" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-21-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-21-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-21-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-21-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-21.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>また、次のように記述すると、連番の最初の数字を変えることができます。</p>



<pre class="wp-block-code"><code>ul>li.item$@3*5</code></pre>



<p>さらに、<code>-</code>を加えると大きい数字から割り振られます。</p>



<pre class="wp-block-code"><code>ul>li.item$@-3*5</code></pre>



<h3 class="wp-block-heading">要素の内容の指定</h3>



<p>Emmetでは、要素の中に指定するテキスト内容なども一気に記述できます。<code>{ }</code>で囲んで指定します。</p>



<pre class="wp-block-code"><code>a{Click me}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-22-1024x576.png" alt="" class="wp-image-22876" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-22-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-22-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-22-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-22-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-22.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>次のようなEmmetで入れ子になった複雑なHTMLを作ることもできます。</p>



<pre class="wp-block-code"><code>p>{お問い合わせは}+a{こちら}+{をクリックしてください}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-23-1024x576.png" alt="" class="wp-image-22877" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-23-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-23-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-23-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-23-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-23.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p><code>p</code>の後に<code>></code>がついていることに気をつけましょう。これがないと、次のようなHTMLになってしまいます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-24-1024x576.png" alt="" class="wp-image-22878" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-24-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-24-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-24-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-24-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-24.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">要素の省略</h3>



<p>要素の名前は、省略することができる場合があります。例えば、次のように記述すると自動的に<code>&lt;div></code>タグが挿入されます。</p>



<pre class="wp-block-code"><code>.wrap>.content</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-25-1024x576.png" alt="" class="wp-image-22880" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-25-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-25-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-25-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-25-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-25.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>この時、省略すると常に<code>&lt;div></code>タグになるという訳ではなく、Emmetが自動的に解釈して適切なタグを挿入します。例えば、<code>&lt;em></code>の子要素の場合はインラインの要素が適切なため、<code>&lt;span></code>タグになります。</p>



<pre class="wp-block-code"><code>em>.info</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-26-1024x576.png" alt="" class="wp-image-22882" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-26-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-26-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-26-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-26-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-26.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>その他、<code>&lt;ul></code>や<code>&lt;ol></code>の子要素の場合は<code>&lt;li></code>に、<code>&lt;table></code>の子要素の場合は<code>&lt;tr></code>や、その子要素なら<code>&lt;td></code>になるなど、柔軟に解釈してくれます。</p>



<h3 class="wp-block-heading">HTMLの基本タグ</h3>



<p><code>!</code>または、<code>html:5</code>と入力して展開すると、HTMLの基本タグを一気に挿入できます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-27-1024x576.png" alt="" class="wp-image-22883" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-27-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-27-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-27-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-27-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-27.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>ただし、ここで挿入されるHTMLは<code>lang</code>属性が英語を表す<code>en</code>になっているため、日本語コンテンツを作成する場合は<code>ja</code>に変更しないと、Google Chromeなどで翻訳ツールが起動してしまうことがあるので注意しましょう。これをカスタマイズする方法は後述します。</p>



<h3 class="wp-block-heading">Lorem ipsum</h3>



<p>Lorem ipsumとは、Webページなどを制作するときに、まだ実際に挿入される原稿が決まっていない場合に、表示の様子を確認するために入れる「ダミー原稿」としてよく使われています。</p>



<p>Emmetでは<code>lorem</code>または<code>ipsum</code>というキーワードで、このLorem ipsumを挿入することができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-28-1024x576.png" alt="" class="wp-image-22885" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-28-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-28-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-28-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-28-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-28.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>とはいえ、Lorem ipsumは英文なので、日本語コンテンツを作る場合には少し使いにくいでしょう。</p>



<h2 class="wp-block-heading">CSSのEmmet</h2>



<p>Emmetは、CSSもサポートしています。CSSのEmmetを利用する場合は、VSCodeの「言語モード」が「CSS」や「SCSS」になっている必要があります。ファイルに<code>.css</code>という拡張子をつけて保存するか、言語モードを切り替えてから利用しましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-29-1024x576.png" alt="" class="wp-image-22886" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-29-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-29-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-29-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-29-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-29.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">プロパティ名の省略</h3>



<p>例えば、てきとうなセレクタを入力した後、<code>m</code>とだけ入力して展開してみましょう。<code>margin</code>プロパティに変化します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-30-1024x576.png" alt="" class="wp-image-22887" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-30-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-30-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-30-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-30-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-30.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>その他、<code>p</code>が<code>padding</code>、<code>bg</code>が<code>background</code>など数文字の省略文字が定義されています。すべての省略文字を確認するには、チートシートを見ると良いでしょう。</p>



<ul>
<li><a href="https://docs.emmet.io/cheat-sheet/" data-type="URL" data-id="https://docs.emmet.io/cheat-sheet/">Emmetチートシート</a></li>
</ul>



<p>また、いくつかのプロパティには値の指定も併せて行える省略形が定義されています。例えば、<code>m10</code>という記述は<code>margin: 10px</code>に展開されます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-31-1024x576.png" alt="" class="wp-image-22889" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-31-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-31-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-31-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-31-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-31.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>単位は基本的には<code>px</code>が使われますが、例えば小数を指定した場合などは、自動的に<code>em</code>に変化します。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-32-1024x576.png" alt="" class="wp-image-22890" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-32-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-32-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-32-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-32-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-32.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>または、単位を明示することもできます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-33-1024x576.png" alt="" class="wp-image-22891" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-33-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-33-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-33-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-33-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-33.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>さらに、この単位についても次のような省略形が定義されています。</p>



<ul>
<li>p → %</li>



<li>e → em</li>



<li>x → ex</li>
</ul>



<h3 class="wp-block-heading">ショートハンドの一括指定</h3>



<p><code>margin</code>プロパティなどの、ショートハンドプロパティの場合、次のように複数の値を指定することができます。</p>



<pre class="wp-block-code"><code>m10px20px30px40px</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-34-1024x576.png" alt="" class="wp-image-22894" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-34-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-34-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-34-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-34-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-34.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">カラーコードの指定</h3>



<p>カラーコードの入力の際にもEmmetが発動することがあります。例えば、<code>#111</code>というカラーコードを指定したい場合は、次のように入力するとEmmetが発動します。</p>



<pre class="wp-block-code"><code>color: #1</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-35-1024x576.png" alt="" class="wp-image-22896" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-35-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-35-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-35-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-35-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-35.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">!important指定</h3>



<p>プロパティに<code>!important</code>を指定したい場合は<code>:!</code>を付加します。（Emmetのリファレンスでは<code>!</code>のみですが、VSCodeの場合は<code>:!</code>になっているようです）</p>



<pre class="wp-block-code"><code>m10e:!</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-36-1024x576.png" alt="" class="wp-image-22898" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-36-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-36-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-36-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-36-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-36.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>なお、Emmet公式ドキュメントでは「ベンダープリフィクス」の記述もサポートされているようですが、VSCodeでは利用できないようです。近年ではSassなどで挿入することの方が多いので、Emmetで利用する機会が少ないためなどかも知れません。</p>



<h2 class="wp-block-heading">Emmetのアクション</h2>



<p>Emmetには、省略記法だけではなく、HTMLの操作に便利な「アクション」がいくつか定義されています。VSCodeでも「コマンドパレット」（表示→コマンドパレット）を利用すると、各アクションを利用できます。それぞれ紹介しましょう。</p>



<h3 class="wp-block-heading">Emmet記法の展開</h3>



<p>Emmet記法を展開します。標準で<code>Tab</code>キーにショートカットが割り当てられています。</p>



<h3 class="wp-block-heading">一致するペアに移動</h3>



<p>カーソルがタグ名にある時、そのペアとなる開始タグまたは終了タグに移動します</p>



<h3 class="wp-block-heading">バランス（外側・内側）</h3>



<p>選択範囲を広げたり、縮めたりすることができます。要素を一気に選択できます。</p>



<h3 class="wp-block-heading">ラップ変換</h3>



<p>タグで囲み忘れた本文などを選択後、このアクションを実行すると後からHTMLタグで囲むことができます。</p>



<h3 class="wp-block-heading">編集点に移動</h3>



<p>Emmetで要素を展開した後、変更可能な箇所に移動できます。例えば属性の値を要素の値を順番に変更するなどができます。</p>



<h3 class="wp-block-heading">項目を選択</h3>



<p>次のHTML要素、前のHTML要素に移動できます。</p>



<h3 class="wp-block-heading">コメントの切り替え</h3>



<p>カーソルのある行をコメントにしたり、コメントを外すことができます。</p>



<h3 class="wp-block-heading">タグの分割・結合</h3>



<p>空要素のタグを<code>&lt;p/&gt;</code>や<code>&lt;p&gt;&lt;/p&gt;</code>に変換できます。</p>



<h3 class="wp-block-heading">タグの削除</h3>



<p>タグの開始タグと終了タグを一気に削除できます。</p>



<h3 class="wp-block-heading">行のマージ</h3>



<p>要素内の改行を削除して、1行に納めます</p>



<h3 class="wp-block-heading">イメージサイズの更新</h3>



<p><code>&lt;img&gt;</code>タグで、<code>width/height</code>属性を省略している場合に、画像の実サイズからこれらの属性を挿入できます。</p>



<h3 class="wp-block-heading">数式の評価</h3>



<p>次のように、数式を記述してアクションを発動すると、計算結果を反映してくれます。</p>



<pre class="wp-block-code"><code>margin: 2*4
↓
margin: 8</code></pre>



<h3 class="wp-block-heading">増加・減少</h3>



<p>CSSプロパティの数字部分にカーソルを合わせてアクションを発動すると、指定された値ずつ増加したり、減少させたりできます。</p>



<h3 class="wp-block-heading">CSS値を反映</h3>



<p>ベンダープリフィクスの付加された、同じプロパティの時に1つの値を変更してからアクションを発動すると、すべてのプロパティの値を変更することができます。</p>



<p>Emmetの公式ドキュメントにはこの他、「画像のdata:URLへのエンコード・デコード」というコマンドもありますが、VSCodeには実装されていないようです。</p>



<h2 class="wp-block-heading">Emmetのカスタマイズ</h2>



<p>Emmetの挙動は自分でカスタマイズすることができます。それには「snippets.json」というJSONファイルを準備して読み込ませます。</p>



<p>まずは、次のような内容のファイルを作成して、てきとうな場所に保存しましょう。ユーザーフォルダーの中などが良いでしょう。</p>



<pre class="wp-block-code"><code>{
    "variables": {
    }
}</code></pre>



<p>そしたら、VSCodeの設定で「拡張機能→Emmet」の「Extensions Path」の設定で「項目の追加」をクリックします。</p>



<p>そして、JSONファイルが含まれているフォルダのパスを入力しましょう。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-37-1024x576.png" alt="" class="wp-image-22899" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-37-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-37-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-37-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-37-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-37.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これでカスタマイズの準備が完了です。このJSONファイルを変更すると、Emmetの動作をカスタマイズできます。</p>



<h3 class="wp-block-heading">lang属性をjaに変更</h3>



<p>まずは、<code>!</code>でEmmetを展開したときに<code>&lt;html></code>タグの<code>lang</code>属性が<code>en</code>になってしまうのを、<code>ja</code>にカスタマイズしましょう。<code>snippets.json</code>に次のように追加します。</p>



<pre class="wp-block-code"><code>"variables": {
    "lang": "ja"
},</code></pre>



<p>ファイルを保存して、Emmetを入力してみると<code>lang</code>属性が変わっていることが分かります。</p>



<h3 class="wp-block-heading">オリジナルのHTMLタグを作ろう</h3>



<p>オリジナルのタグを作ることもできます。例えばここでは、次のようなHTMLを一気に挿入できる<code>list</code>というスニペットを作ってみましょう。</p>



<p>次のように追加します。</p>



<pre class="wp-block-code"><code>"html": {
    "snippets": {
        "list": "ul>li{${1}}*3"
    }
}</code></pre>



<p>こうして、<code>list</code>と入力してEmmetを展開すると、HTMLが生成できます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-38-1024x576.png" alt="" class="wp-image-22900" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-38-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-38-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-38-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-38-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-38.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>スニペット内に<code>{${1}}</code>と記述すると、カーソルがそこに移動します。次のように記述すると、あらかじめ値を入れることもできます。</p>



<pre class="wp-block-code"><code>"list": "ul>li{${1:item}}*3"</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-39-1024x576.png" alt="" class="wp-image-22901" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-39-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-39-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-39-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-39-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-39.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h3 class="wp-block-heading">オリジナルのCSSプロパティを作ろう</h3>



<p>同じくCSSも作ることができます。次のように追加しましょう。</p>



<pre class="wp-block-code"><code>"css": {
  "snippets": {
    "dark": "background-color: #000;\ncolor: #fff;"
  }
}</code></pre>



<p>CSSファイルのセレクタ内で、<code>dark</code>と入力して展開すると、次のような背景と文字色が反転したスタイルを一気に書き込めます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-40-1024x576.png" alt="" class="wp-image-22903" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-40-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-40-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-40-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-40-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-40.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>よく使うスニペットを登録しておくとよいでしょう。</p>



<p>Emmetを利用すると、非常にすばやくHTMLを記述できるようになるため、少しずつでも使っていくと良いでしょう。</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/03/emmet-begin/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22850</post-id>	</item>
		<item>
		<title>JavaScript Web Animations APIを使って、アニメエフェクトを作ろう</title>
		<link>https://tomosta.jp/2023/03/javascript_web_animations_api/</link>
					<comments>https://tomosta.jp/2023/03/javascript_web_animations_api/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Fri, 10 Mar 2023 06:40:23 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[JavaScript]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22810</guid>

					<description><![CDATA[Webページにアニメーションを実装したいとき、Web Animations APIが利用できます。ここでは、文字を動かすアニメーションを制作してみましょう。]]></description>
										<content:encoded><![CDATA[
<p></p>



<p>Webページを制作するとき、近年では各要素を動かす演出を入れるのが一般的になりました。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-1024x576.png" alt="" class="wp-image-22812" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>これらは、JavaScriptのライブラリを使ったり、CSSのアニメーション機能を使うことがありますが、JavaScriptにも「Web Animations API」という標準の機能が準備されています。</p>



<p>IEなどでは利用できないものの、最近のモダンブラウザでは利用でき、CSSアニメーションに比べると手軽に実装ができます。ここでは、Manaさん著の JavaScript入門書籍『<a href="https://amzn.to/3mBhkiN" target="_blank" rel="noreferrer noopener">1冊ですべて身につくJavaScript入門講座</a>』から、文字の演出プログラムを制作してみましょう。</p>



<h2 class="wp-block-heading">HTMLを準備しよう</h2>



<p>まずは、HTMLを準備しましょう。ここでは、見出しを準備してid属性を付加しておきます。</p>



<pre class="wp-block-code"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="ja"&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;title&gt;6-4 見出しを下から浮き上がらせよう&lt;/title&gt;

    &lt;link rel="stylesheet" href="css/style.css"&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;h1 id="heading"&gt;JavaScriptでアニメーション&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>ここでは、見出しを準備してid属性を付加しておきます。そして、スタイルシートを準備します。ここでは単に、位置を中央揃えに変更しました。</p>



<pre class="wp-block-code"><code>h1 {
  text-align: center;
}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-1-1024x576.png" alt="" class="wp-image-22815" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">JavaScriptを準備しよう</h2>



<p>続いて、JavaScriptを準備しましょう。<code>js/script.js</code>というファイルを作成して、次のように記述します。</p>



<pre class="wp-block-code"><code>const heading = document.querySelector('#heading');

const keyframes = {
}

heading.animate(keyframes, 2000);</code></pre>



<p>これを、先ほどのHTMLから読み込みます。</p>



<pre class="wp-block-code"><code>...
  &lt;script src="js/script.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>まだ現状では、表示に影響はありません。これで準備完了です。今作成した<code>script.js</code>を書き換えていきましょう。</p>



<h2 class="wp-block-heading">フェードインアニメーションを使おう</h2>



<p>それでは、このタイトルをフェードインで表示してみましょう。JavaScriptの<code>keyframes</code>に次のように設定します。</p>



<pre class="wp-block-code"><code>const keyframes = {
  opacity: &#91;0, 1]
}</code></pre>



<p>これで再読み込みすると、タイトルがフェードインで表示されます。不透明度（opacity）を、開始位置（0）から終了位置（1）まで変化させるという指示を作っています。これを、<code>animate</code>メソッドに指定します。</p>



<p><code>animate</code>メソッドでは、次のようなパラメーターで動きを指定できます。</p>



<pre class="wp-block-code"><code>動かす要素.animate(動かす内容, 再生時間);</code></pre>



<p>ここでは、作成した<code>keyframes</code>を2000ミリ秒=2秒でアニメーションさせました。CSSで変化できる内容であれば、基本的には動かすことができます。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-2-1024x576.png" alt="" class="wp-image-22816" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">複数の動きを指定しよう</h2>



<p><code>keyframes</code>には、複数のプロパティを指定することもできます。ここでは、<code>translate</code>を指定して、下から上に向かってアニメーションするように指定してみましょう。</p>



<pre class="wp-block-code"><code>const keyframes = {
  opacity: &#91;0, 1],
  translate: &#91;'0 50px', 0]
}</code></pre>



<p>これで表示しましょう。ここでは、最初の位置がx軸が0、y軸が50pxの場所に配置して、終了位置としてx軸、y軸ともに0を指定しています。これにより、縦方向に50pxアニメーションします。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-3-1024x576.png" alt="" class="wp-image-22817" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">動きの詳細を指定しよう</h2>



<p><code>animate</code>メソッドの2つめのパラメーターには、実は動きの詳細を指定することができます。次のように変更しましょう。</p>



<pre class="wp-block-code"><code>const options = {
  duration: 2000,
  easing: 'ease'
}</code></pre>



<p>そして、<code>animate</code>メソッドのパラメーターにこれを指定しましょう。</p>



<pre class="wp-block-code"><code>heading.animate(keyframes, options);</code></pre>



<p>これにより、2000ミリ秒で動作するのはそのまま、「イージング」が聞くようになって、ふわっと動くようになります。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-4-1024x576.png" alt="" class="wp-image-22819" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">色を変更しよう</h2>



<p>最後に、アニメーションの内容を変更して色が変化するようにしてみましょう。<code>keyframes</code>を次のように変更します。</p>



<pre class="wp-block-code"><code>const keyframes = {
  color: &#91;'#f66', '#fc2', '#0c6', '#0bd']
}</code></pre>



<p>これで、見出しの色が次々に変化するようになります。<code>options</code>に次のように指定すると、ずっとアニメーションが繰り返されるようになります。</p>



<pre class="wp-block-code"><code>const options = {
  duration: 8000,
  direction: 'alternate',
  iterations: Infinity
}</code></pre>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-5-1024x576.png" alt="" class="wp-image-22820" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<h2 class="wp-block-heading">その他の本格アニメーションも制作できる</h2>



<p>このように、<code>animate</code>メソッドを利用すれば、ちょっとしたアニメーションをライブラリなどを使うことなく実装することができます。</p>



<p>今回参考にさせて頂いた『<a href="https://amzn.to/3mBhkiN" target="_blank" rel="noreferrer noopener">1冊ですべて身につくJavaScript入門講座</a>』にはこの他にも、</p>



<ul>
<li>背景がのびる見出しを作る</li>



<li>ふよふよ動く見出しを作る</li>
</ul>



<p>といったアニメーションの実装方法が紹介されています。</p>



<figure class="wp-block-image size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2023/03/image-6-1024x576.png" alt="" class="wp-image-22821" srcset="https://tomosta.jp/wp-content/uploads/2023/03/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2023/03/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2023/03/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2023/03/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2023/03/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>JavaScriptが初めてという方でも、基本の部分から紹介されているので安心して読み進めることができ、最終的にはスクロール時に要素が表示されるWebページを制作しながら、JavaScriptの技術を学ぶことができるので、かなり実践的なところまでこの1冊で網羅することができるでしょう。</p>



<p>これからJavaScriptを学んで行きたいという方には、最適な1冊でした。是非、</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/03/javascript_web_animations_api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22810</post-id>	</item>
		<item>
		<title>Figmaでプレゼンテーション資料を作ろう</title>
		<link>https://tomosta.jp/2023/02/figma-presentation/</link>
					<comments>https://tomosta.jp/2023/02/figma-presentation/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Mon, 20 Feb 2023 09:51:41 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[Figma]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22773</guid>

					<description><![CDATA[ここでは、2023年2月8日に技術評論社から発売された、『Figmaデザイン入門〜UIデザイン、プロトタイピングからチームメンバーとの連携まで〜（綿貫 佳祐著）』の中から、会社紹介資料を作成する手順を紹介しましょう。]]></description>
										<content:encoded><![CDATA[
<p>Figmaは、UIデザインやWebデザインの設計ツールですが、実際にはプレゼンテーション資料や、印刷物なども作ることができます。</p>



<p>ここでは、2023年2月8日に技術評論社から発売された、『<a rel="noreferrer noopener" href="https://amzn.to/411lvUO" target="_blank">Figmaデザイン入門〜UIデザイン、プロトタイピングからチームメンバーとの連携まで〜</a>（綿貫 佳祐著）』の中から、会社紹介資料を作成する手順を紹介しましょう。</p>



<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="Figmaでプレゼンテーション資料を作ろう" width="500" height="281" src="https://www.youtube.com/embed/RdxClGSg4iE?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2023/02/figma-presentation/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22773</post-id>	</item>
		<item>
		<title>SvelteKitの基本を Svelte Tutorialで学ぼう</title>
		<link>https://tomosta.jp/2022/12/sveltekit/</link>
					<comments>https://tomosta.jp/2022/12/sveltekit/#respond</comments>
		
		<dc:creator><![CDATA[たにぐち　まこと]]></dc:creator>
		<pubDate>Sun, 18 Dec 2022 08:01:19 +0000</pubDate>
				<category><![CDATA[入門講座]]></category>
		<category><![CDATA[Svelte]]></category>
		<guid isPermaLink="false">https://tomosta.jp/?p=22635</guid>

					<description><![CDATA[JavaScriptのフレームワーク、SvelteKitの使い方を、Svelte公式のチュートリアルを利用しながら一緒に学んで行きましょう]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-embed is-type-video is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
<iframe loading="lazy" title="SvelteKitのルーティング機能で複数のページを作成しよう" width="500" height="281" src="https://www.youtube.com/embed/5oCxqqfsPxY?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div></figure>



<p>2022年12月15日に、<a href="https://svelte.jp/blog/announcing-sveltekit-1.0" target="_blank" rel="noreferrer noopener">SvelteKitが正式リリースされました</a>。SvelteKitは、ReactのNext.jsやVue.jsのNuxt等と同様に、SvelteというJavaScriptライブラリを利用したフレームワークです。</p>



<p>複数のページで構成されるWebサイトを制作したり、データベースと連携したアプリを開発したりでき、Next.jsやNuxtに比べるとシンプルで作りやすい印象があります。</p>



<p>ここでは、Svelteを学習できる「Svelte Tutorial」のSvelteKitのセクションを進めながら、説明が英語なので日本語で補足をしていきましょう。</p>



<h2 class="wp-block-heading">Svelteチュートリアルを起動しよう</h2>



<p>Svelteチュートリアルは、Svelteのドキュメントからアクセスできます。</p>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<a href="https://learn.svelte.dev/tutorial/welcome-to-svelte" rel="nofollow">https://learn.svelte.dev/tutorial/welcome-to-svelte</a>
</div></figure>



<p>最初はSvelte自身のチュートリアルが展開されるので、SvelteKitのチュートリアルは次のページから始まります。</p>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<a href="https://learn.svelte.dev/tutorial/introducing-sveltekit" rel="nofollow">https://learn.svelte.dev/tutorial/introducing-sveltekit</a>
</div></figure>



<p>すると、左側に説明が、右側にエディター（上部）とブラウザー（下部）に展開されます。上部のエディターのファイルを変更すると、すぐに下のWebブラウザで確認できます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-1024x576.png" alt="" class="wp-image-22641" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>例えば今、<code>&lt;h1&gt;</code>要素があるので内容を書き換えると、リアルタイムに書き換わることが確認できます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-1-1024x576.png" alt="" class="wp-image-22642" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-1-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-1-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-1-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-1-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-1.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2 class="wp-block-heading">Svelteを体験しよう</h2>



<p>SvelteKitを利用して生成されたページには、Svelteを利用する事ができます。Svelteでは、<code>{ ... }</code>という記述を埋め込むと、変数の内容を等をリアルタイムに反映できます。まずは、次のように変数を宣言しましょう。Svelteでは、ファイルの上部に<code>&lt;script&gt;</code>タグを埋め込めます。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    let name = 'ともすた'
&lt;/script&gt;

&lt;h1&gt;Welcome to tomosta&lt;/h1&gt;
...</code></pre>



<p>そしたら、本文内に次のように埋め込んでみましょう。</p>



<pre class="wp-block-code"><code>...
&lt;h1&gt;Welcome to { name }&lt;/h1&gt;</code></pre>



<p>変数の内容を変更すれば、リアルタイムに書き換わります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-2-1024x576.png" alt="" class="wp-image-22644" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-2-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-2-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-2-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-2-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-2.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2 class="wp-block-heading">ファイルの構成を確認しよう</h2>



<p>SvelteKitはインストールすると、次のようなフォルダーやファイルが自動で生成されます。</p>



<ul>
<li>src/app.html<br>このファイルが実際にWebブラウザに表示されます<code>&lt;head&gt;</code>要素を変えたい場合などはこのファイルを変更します</li>



<li>src/routes<br>各ページのファイルが格納されます</li>



<li>static<br>画像ファイルなどのリソースファイルなどを格納します</li>



<li>svelte.config.js<br>SvelteKitの設定ファイルです</li>
</ul>



<p>この他、Node.jsの設定を行う「package.json」と、Viteというビルドツールの設定ファイルである「vite.config.js」が設置されていますが、これらについてはここでは省略します。「Node.js」や「Vite」などを学習しましょう。</p>



<h2 class="wp-block-heading">ページを増やそう</h2>



<p>左側の画面下にある、次ページへのリンクを何度かクリックして「<a href="https://learn.svelte.dev/tutorial/pages" target="_blank" rel="noreferrer noopener">Pages</a>」というページまで移動しましょう。図のように、「home」と「about」というナビゲーションがあるページが表示されます。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-3-1024x576.png" alt="" class="wp-image-22645" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-3-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-3-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-3-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-3-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-3.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>しかし、現状では「about」をクリックしてもページが見つかりません。そこで、このアドレスにページを追加しましょう。</p>



<p>SvelteKitは、<code>src/routes</code>フォルダーの中に特定の名前でフォルダーやファイルを作成すると、自動的にアドレスが生成されるしくみです。例えば、<code>/about</code>というアドレスを作りたい場合は、<code>/src/</code>フォルダーの中に<code>about</code>という名前のフォルダーを作成します。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-4-1024x576.png" alt="" class="wp-image-22647" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-4-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-4-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-4-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-4-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-4.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>そしたら、このフォルダーの中に<code>+page.svelte</code>という名前のファイルを作成しましょう。ファイル名の先頭が「+」になっていたり、拡張子が<code>.svelte</code>となっていますが、このファイル名で固定になっています。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-5-1024x576.png" alt="" class="wp-image-22648" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-5-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-5-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-5-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-5-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-5.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>これでファイルを作れば、すぐにアクセスができるようになります。後はこのファイルに内容を作っていけば、ページを増やすことができます。</p>



<h2 class="wp-block-heading">レイアウトファイルを使おう</h2>



<p><a href="https://learn.svelte.dev/tutorial/layouts" target="_blank" rel="noreferrer noopener">次ページ</a>にアクセスしましょう。</p>



<p>サイト内で使う共通のパーツなどの場合は、個別に作成するよりは共通パーツにした方が良いでしょう。このような時は、レイアウトファイルを利用できます。</p>



<p><code>src/routes</code>フォルダーに<code>+layout.svelte</code>ファイルを作成しましょう。すると、<code>/</code>や<code>/about</code>が真っ白のページに変わりますが、すでにレイアウトファイルが採用されるようになっています。</p>



<figure class="wp-block-embed is-type-rich is-provider-wp-oembed-blog-card wp-block-embed-wp-oembed-blog-card"><div class="wp-block-embed__wrapper">
<a href="https://learn.svelte.dev/tutorial/layouts" rel="nofollow">https://learn.svelte.dev/tutorial/layouts</a>
</div></figure>



<p>各ページの内容を反映するには<code>&lt;slot /&gt;</code>という特別なタグを使います。</p>



<pre class="wp-block-code"><code>&lt;slot /&gt;</code></pre>



<p>このタグの前後には、共通のパーツを追加することができます。例えばここでは、<code>src/routes/+page.svelte</code>ファイルに書かれているナビゲーションを設置してみましょう。<code>&lt;nav&gt;</code>要素全体を切り取って、<code>+layout.svelte</code>に貼り付けておきましょう。</p>



<pre class="wp-block-code"><code>&lt;nav&gt;
&lt;a href="/"&gt;home&lt;/a&gt;
&lt;a href="/about"&gt;about&lt;/a&gt;
&lt;/nav&gt;

&lt;slot /&gt;</code></pre>



<h2 class="wp-block-heading">パラメータを指定できるようにしよう</h2>



<p><a href="https://learn.svelte.dev/tutorial/params" target="_blank" rel="noreferrer noopener">次ページ</a>にアクセスしましょう。</p>



<p>こうして、ページを増やしていく事はできますが、例えばブログのしくみを作ろうとした場合、各記事の内容はページとしては存在せずに、別のヘッドレスCMSやデータベースからデータを取得する事がほとんどです。</p>



<p>そのため、<code>/blog/one</code>とか<code>/blog/two</code>など、さまざまなアドレスを指定したときにも対応できるようにしましょう。これには、パラメータを受け取れるようにします。<code>/src/routes/blog</code>フォルダーに、<code>[slug]</code>というフォルダーを作成しましょう。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-6-1024x576.png" alt="" class="wp-image-22652" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-6-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-6-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-6-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-6-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-6.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>このフォルダーの中に、これまでと同様に<code>+page.svelte</code>ファイルを作成してページ内容を作成しましょう。これで、<code>/blog/one</code>などのアドレスが指定されたときに、このファイルが表示されるようになります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-7-1024x576.png" alt="" class="wp-image-22653" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-7-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-7-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-7-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-7-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-7.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2 class="wp-block-heading">JSONファイルと連携しよう</h2>



<p><a href="https://learn.svelte.dev/tutorial/page-data" target="_blank" rel="noreferrer noopener">次ページ</a>にアクセスしましょう。</p>



<p>では、ブログの記事を外部のデータから取得しましょう。ここでは、JSONデータから取得します。ブログ記事は<code>src/routes/blog/data.js</code>ファイルに準備されています。これを読み込んで、一覧画面を作成してみましょう。</p>



<p>まずは、これを読み込むためのプログラムを作成します。これには<code>/src/routes/blog/+page.server.js</code>というファイル名で作成しましょう。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-8-1024x576.png" alt="" class="wp-image-22655" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-8-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-8-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-8-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-8-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-8.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>次のように書き込みます。</p>



<pre class="wp-block-code"><code>import { posts } from './data.js';

export function load() {
    return {
        summaries: posts.map((post) =&gt; ({
            slug: post.slug,
            title: post.title
        }))
    };
}</code></pre>



<p>すると、同じ場所にある<code>+page.svelte</code>ファイルから<code>data</code>として受け取ることができるようになります。<code>/src/routes/blog/+page.svelte</code>ファイルを次のように変更しましょう。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    export let data;
&lt;/script&gt;

&lt;h1&gt;blog&lt;/h1&gt;

&lt;ul&gt;
    {#each data.summaries as { slug, title }}
        &lt;li&gt;&lt;a href="/blog/{slug}"&gt;{title}&lt;/a&gt;&lt;/li&gt;
    {/each}
&lt;/ul&gt;</code></pre>



<p>各個別のページも同じように作成します。<code>/src/routes/blog/[slug]</code>フォルダーに<code>+page.server.js</code>ファイルを作成します。</p>



<pre class="wp-block-code"><code>import { posts } from '../data.js';

export function load({ params }) {
    const post = posts.find((post) =&gt; post.slug === params.slug);

    return {
        post
    };
}</code></pre>



<p>ここでは<code>find</code>メソッドを使って、URLで指定されているパラメーター（slug）と一致するデータだけを取得しています。</p>



<p>後は、<code>/src/routes/blog/[slug]/+page.svelte</code>は次のようになります。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    export let data;
&lt;/script&gt;

&lt;h1&gt;blog post&lt;/h1&gt;
&lt;h1&gt;{data.post.title}&lt;/h1&gt;
&lt;div&gt;{@html data.post.content}&lt;/div&gt;</code></pre>



<p>本文を表示している<code>{@html ...}</code>というのは、データの中にHTMLのタグがあった場合に、そのまま内容を表示するというプレースホルダーです。これを使う場合、データ内の安全性がSvelteでは保障されなくなるため、注意をして利用しましょう。必要に応じて、手作業でエスケープ処理などをする必要があります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-9-1024x576.png" alt="" class="wp-image-22657" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-9-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-9-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-9-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-9-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-9.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2 class="wp-block-heading">不正なパラメーターが指定されたときにページが見つからない処理をしよう</h2>



<p>現状、アドレスを書き換えて不正な内容などに変更すると、JSONのデータが取得できないため「Internal Error」が発生してしまいます。しかし、実際にはページの削除などもあるため、一般的なページが見つからない場合のエラー処理をしていきましょう。これには<code>/src/routes/blog/[slug]/+page.server.js</code>に次のように記述して、404エラーコードを返却します。</p>



<pre class="wp-block-code"><code>export function load({ params }) {
    const post = posts.find((post) =&gt; post.slug === params.slug);

    if (!post) throw error(404); // 追加

    return {
        post
    };
}</code></pre>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-10-1024x576.png" alt="" class="wp-image-22659" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-10-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-10-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-10-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-10-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-10.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2 class="wp-block-heading">共通して利用するデータをロードしよう</h2>



<p>各ページで利用したいデータは、先の通り<code>+page.server.js</code>というファイルを準備しますが、もし一覧でも個別のページでも共通して利用したいデータがある場合は、<code>+layout.server.js</code>というファイルが利用できます。</p>



<p>まずは、<code>/src/routes/blog/+page.server.js</code>を<code>/src/routes/blog/+layout.server.js</code>に名前を変えましょう。これで、他のファイルからも参照ができるようになります。</p>



<p>そしたら、<code>/src/routes/blog/[slug]/+layout.svelte</code>に次のように追加します。</p>



<pre class="wp-block-code"><code>&lt;script&gt;
    export let data;
&lt;/script&gt;

&lt;div class="layout"&gt;
    &lt;main&gt;
        &lt;slot /&gt;
    &lt;/main&gt;

    &lt;aside&gt;
        &lt;h2&gt;More posts&lt;/h2&gt;
        &lt;ul&gt;
            {#each data.summaries as { slug, title }}
                &lt;li&gt;
                    &lt;a href="/blog/{slug}"&gt;{title}&lt;/a&gt;
                &lt;/li&gt;
            {/each}
        &lt;/ul&gt;
    &lt;/aside&gt;
&lt;/div&gt;</code></pre>



<p>これで、各ページに最新のエントリーが表示されるようになります。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-11-1024x576.png" alt="" class="wp-image-22660" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-11-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-11-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-11-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-11-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-11.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<h2 class="wp-block-heading">スタイルシートを調整しよう</h2>



<p>Svelteでは、スタイルシートも<code>.svelte</code>ファイルに書き込み事ができます。一番下に追加しましょう。</p>



<pre class="wp-block-code"><code>...
&lt;style&gt;
    @media (min-width: 640px) {
        .layout {
            display: grid;
            gap: 2em;
            grid-template-columns: 1fr 16em;
        }
    }
&lt;/style&gt;</code></pre>



<p>これで、サイドエリアに移動しました。</p>


<div class="wp-block-image">
<figure class="aligncenter size-large"><img decoding="async" loading="lazy" width="1024" height="576" src="https://tomosta.jp/wp-content/uploads/2022/12/image-12-1024x576.png" alt="" class="wp-image-22661" srcset="https://tomosta.jp/wp-content/uploads/2022/12/image-12-1024x576.png 1024w, https://tomosta.jp/wp-content/uploads/2022/12/image-12-300x169.png 300w, https://tomosta.jp/wp-content/uploads/2022/12/image-12-768x432.png 768w, https://tomosta.jp/wp-content/uploads/2022/12/image-12-1536x864.png 1536w, https://tomosta.jp/wp-content/uploads/2022/12/image-12.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure></div>


<p>＜以下、執筆中＞</p>
]]></content:encoded>
					
					<wfw:commentRss>https://tomosta.jp/2022/12/sveltekit/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
		<post-id xmlns="com-wordpress:feed-additions:1">22635</post-id>	</item>
	</channel>
</rss>